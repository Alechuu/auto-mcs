- World directory input looks bendy because of bad anti-aliasing on "text_input_ghost_selected.png"

(Partially fixed??) - Rule button text centering off when swtiching from different pages (on new server, add IP and switch from OPS list to BANS list)

- Fabric crashes on Geyser install in 1.19.4 with ViaFabric

Server Manager Stuff:

	- Add a right-click context menu with [rename, favorite/unfavorite, delete]

- Make function to retrieve IP address in constants when server is loaded. Use ngrok IP if that's open
- Show running symbol and IP address on ServerButton in ServerManagerScreen (Maybe display up-time and current player count in place of type/version on right)
- In ACL manager, check if user is online when issuing self.ban_user(), self.op_user(), and self.wl_user()
- If so, send /ban, /op, /whitelist to server chat

- Make sure to force kill any subprocesses ran by constants.run_proc() when app is closed
- Make sure to kill any servers that are still running when app is closed, and notify user with popup



- if command.tmp exists, only delete it when the server exits without crashing

!-- Fabric wouldn't actually stop for some reason, so server console was hanging

- Make terminal labels copyable, copy raw text

- Make ACL commands check if the server is running, and execute /ban etc.
- Make ACL commands convert PlayerScriptObject to a username, and a list of objects to a list of usernames so you can do "acl.ban_player(player)"


- Create persistent storage for PlayerScriptObjects, and ServerScriptObjects
	- Storage should be in the "./Config/amscript/persistent" directory 
	- Player in "./persistent/player", server in "./persistent/server"
	- Store files as "username.json", and "servername.json"
	- Load player storage in PlayerScriptObject, and load server storage in ServerScriptObject
	- Make command in baselib.ams !resetstorage (all, server, player) (None, server_name:(defaults to current server), player_name:(defaults to player running command)):optional






yellow = (0.953, 0.929, 0.38, 1)
blue = (0.439, 0.839, 1, 1)
red = (1, 0.5, 0.65, 1)
green = (0.3, 1, 0.6, 1)





------------------- general -------------------
 - Name
 - Type
 - Version (build)

 - World
 - World type
 - Seed
-----------------------------------------------



------------------- options -------------------
 - Difficulty
 - Gamemode
 - PVP
 - Spawn protection
 
 - Keep inventory
 - Spawn creatures
 - Daylight/weather
 - Random tick speed
 - Command blocks
 - Chat reporting
-----------------------------------------------



------------------- network -------------------
 - Server IP
 - Geyser (if enabled)
 - Max players
 - MOTD

 - Access Control
 	- Operators:
 	- Bans:
	- Whitelist (if enabled):
-----------------------------------------------


		(if addons exist)
-------------------- addons -------------------
 - List all addons here (location)
-----------------------------------------------





					[ Create new server steps ]



# Pre-check
	# Temp folder: os.path.join(constants.tempDir, 'tmpsvr')
	# 1. Recursively delete temp server folder if it already exists
	# 2. Create temp server folder again


# Verifying Java installation
	# 1. Run javacheck function and average download percentage to progress bar (figure out urllib reporthook)


# Downloading 'server.jar'
	# 1. Actually the easiest thing ever, function to use urllib and new_server_info["jar_link"] and report progress
	# 2. Download to downDir folder, then copy to temp folder


# Add-oning add-ons
(Side note, create argument in addons.import_addon() to import to temp server)
	# 1. If disable chat reporting is on, automatically download remove chat reporting add-on
	# 2. Add Fabric API to mods if downloading fabric
	# 3. If geyser is enabled, automatically download geyser, floodgate, vault, and viaversion
	# 4. If Forge or Fabric, create "mods" and "disabled-mods" folder. Else create "plugins" and "disabled-plugins"
	# 5. Loop through new_server_info["addon_objects"] and import/download addons to respective folder with ThreadPoolExecutor


- Applying server configuration
(Side note, create argument in acl.write_rules() to generate files in temp server)
	# 1. If Forge, refer to installServer() function in main.py (L-3782) of AMCS 1.65 to install it
	# 	- Figure something out for fabric retard	
	# 2. If custom world is selected, copy that to temp folder
	3. Change custom world gamerules based on new_server_info, figure out how to do it with NBT for new worlds (chicken and the egg issue)
	# 4. If new_server_info["acl_object"].count_rules["total"] > 0, run acl.write_rules() on temp folder
	# 5. Create constants function to find automatic memory allocation with x-plat support
	# 6. Create constants function to dynamically generate batch file/shell script to run server
	# 7. Create EULA.txt in temp folder
	# 8. Dynamically generate server.properties based on game version and new_server_info
	9. Create world if it wasn't imported and change affected gamerules
		- Simply edit gamerules if world was imported
		- allow importing of worlds from zip files in CreateServerWorldScreen
	# 10. Generate auto-mcs.ini
	# 11. Rename temp folder to new_server_info["name"] and move it to serverDir


- Creating initial back-up
	- Create backup.py and use the backup function to save the newly created server



